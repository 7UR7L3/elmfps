var _user$project$Fps$dotMap = {
	ctor: '::',
	_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 0, 0),
	_1: {
		ctor: '::',
		_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 1, 0),
		_1: {
			ctor: '::',
			_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 2, 0),
			_1: {
				ctor: '::',
				_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 3, 0),
				_1: {
					ctor: '::',
					_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 1, 0, 0),
					_1: {
						ctor: '::',
						_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 1, 1, 0),
						_1: {
							ctor: '::',
							_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 1, 2, 0),
							_1: {
								ctor: '::',
								_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 1, 3, 0),
								_1: {
									ctor: '::',
									_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 2, 0, 0),
									_1: {
										ctor: '::',
										_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 2, 1, 0),
										_1: {
											ctor: '::',
											_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 2, 2, 0),
											_1: {
												ctor: '::',
												_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 2, 3, 0),
												_1: {
													ctor: '::',
													_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 1, 3, 1),
													_1: {
														ctor: '::',
														_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 2, 2, 1),
														_1: {
															ctor: '::',
															_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 2, 3, 1),
															_1: {
																ctor: '::',
																_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 2, 3, 2),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$Fps$directionToAngle = function (direction) {
	var _p0 = direction;
	switch (_p0.ctor) {
		case 'North':
			return 0;
		case 'NorthEast':
			return _elm_lang$core$Basics$pi * 0.25;
		case 'East':
			return _elm_lang$core$Basics$pi * 0.5;
		case 'SouthEast':
			return _elm_lang$core$Basics$pi * 0.75;
		case 'South':
			return _elm_lang$core$Basics$pi * 1;
		case 'SouthWest':
			return _elm_lang$core$Basics$pi * 1.25;
		case 'West':
			return _elm_lang$core$Basics$pi * 1.5;
		case 'NorthWest':
			return _elm_lang$core$Basics$pi * 1.75;
		default:
			return 0;
	}
};
var _user$project$Fps$fragmentShader = {'src': '\n  precision mediump float;\n  varying vec3 vcolor;\n  void main () {\n      gl_FragColor = vec4(vcolor, 0.25);\n  }\n'};
var _user$project$Fps$vertexShader = {'src': '\n  attribute vec3 position;\n  attribute vec3 color;\n  uniform mat4 perspective;\n  uniform mat4 camera;\n  uniform mat4 rotation;\n  varying vec3 vcolor;\n  void main () {\n      gl_Position = perspective * camera * rotation * vec4((0.05 * position) , 1.0);\n      vcolor = color;\n  }\n'};
var _user$project$Fps$uniforms = F4(
	function (_p1, angle, position, direction) {
		var _p2 = _p1;
		return {
			rotation: A2(
				_elm_community$linear_algebra$Math_Matrix4$makeRotate,
				angle,
				A3(_elm_community$linear_algebra$Math_Vector3$vec3, -1, 0, 0)),
			perspective: A4(
				_elm_community$linear_algebra$Math_Matrix4$makePerspective,
				45,
				_elm_lang$core$Basics$toFloat(_p2.width) / _elm_lang$core$Basics$toFloat(_p2.height),
				1.0e-2,
				100),
			camera: A3(
				_elm_community$linear_algebra$Math_Matrix4$makeLookAt,
				position,
				A2(_elm_community$linear_algebra$Math_Vector3$add, position, direction),
				A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 1, 0))
		};
	});
var _user$project$Fps$requestPointerLock = _elm_lang$core$Native_Platform.outgoingPort(
	'requestPointerLock',
	function (v) {
		return null;
	});
var _user$project$Fps$update = F2(
	function (action, model) {
		var _p3 = action;
		switch (_p3.ctor) {
			case 'Resize':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{size: _p3._0}),
					{ctor: '[]'});
			case 'Animate':
				var dir = _ohanhi$keyboard_extra$Keyboard_Extra$wasdDirection(model.pressedKeys);
				var a = (_user$project$Fps$directionToAngle(dir) - A2(
					_elm_lang$core$Basics$atan2,
					_elm_community$linear_algebra$Math_Vector3$getX(model.direction),
					_elm_community$linear_algebra$Math_Vector3$getZ(model.direction))) + _elm_lang$core$Basics$pi;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							angle: model.angle + (a / 50),
							position: _elm_lang$core$Native_Utils.eq(dir, _ohanhi$keyboard_extra$Keyboard_Extra$NoDirection) ? model.position : A3(
								_elm_community$linear_algebra$Math_Vector3$vec3,
								_elm_community$linear_algebra$Math_Vector3$getX(model.position) + (_elm_lang$core$Basics$sin(a) / 75),
								_elm_community$linear_algebra$Math_Vector3$getY(model.position),
								_elm_community$linear_algebra$Math_Vector3$getZ(model.position) - (_elm_lang$core$Basics$cos(a) / 75))
						}),
					{ctor: '[]'});
			case 'KeyboardMsg':
				var keys = A2(_ohanhi$keyboard_extra$Keyboard_Extra$update, _p3._0, model.pressedKeys);
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{pressedKeys: keys}),
					{ctor: '[]'});
			case 'Click':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Fps$requestPointerLock(
						{ctor: '_Tuple0'})
				};
			default:
				var pitched = A2(
					_elm_community$linear_algebra$Math_Matrix4$transform,
					A2(
						_elm_community$linear_algebra$Math_Matrix4$makeRotate,
						(0 - _p3._0._0) / 1000,
						A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 1, 0)),
					model.direction);
				var acrossvec = A2(
					_elm_lang$core$Basics$atan2,
					_elm_community$linear_algebra$Math_Vector3$getX(model.direction),
					_elm_community$linear_algebra$Math_Vector3$getZ(model.direction)) - (_elm_lang$core$Basics$pi / 2);
				var yawed = A2(
					_elm_community$linear_algebra$Math_Matrix4$transform,
					A2(
						_elm_community$linear_algebra$Math_Matrix4$makeRotate,
						(0 - _p3._0._1) / 1000,
						A3(
							_elm_community$linear_algebra$Math_Vector3$vec3,
							_elm_lang$core$Basics$sin(acrossvec),
							0,
							_elm_lang$core$Basics$cos(acrossvec))),
					pitched);
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{direction: yawed}),
					{ctor: '[]'});
		}
	});
var _user$project$Fps$mouseMove = _elm_lang$core$Native_Platform.incomingPort(
	'mouseMove',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (x0) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (x1) {
					return _elm_lang$core$Json_Decode$succeed(
						{ctor: '_Tuple2', _0: x0, _1: x1});
				},
				A2(_elm_lang$core$Json_Decode$index, 1, _elm_lang$core$Json_Decode$float));
		},
		A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$float)));
var _user$project$Fps$Model = F5(
	function (a, b, c, d, e) {
		return {size: a, angle: b, position: c, direction: d, pressedKeys: e};
	});
var _user$project$Fps$Vertex = F2(
	function (a, b) {
		return {position: a, color: b};
	});
var _user$project$Fps$ptToCube = F3(
	function (p, s, col) {
		var fll = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) - s);
		var flr = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) - s);
		var ful = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) - s);
		var fur = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) - s);
		var bll = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) + s);
		var blr = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) + s);
		var bul = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) + s);
		var bur = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) + s);
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: A2(_user$project$Fps$Vertex, ful, col),
				_1: A2(_user$project$Fps$Vertex, fur, col),
				_2: A2(_user$project$Fps$Vertex, flr, col)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple3',
					_0: A2(_user$project$Fps$Vertex, ful, col),
					_1: A2(_user$project$Fps$Vertex, flr, col),
					_2: A2(_user$project$Fps$Vertex, fll, col)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple3',
						_0: A2(_user$project$Fps$Vertex, bul, col),
						_1: A2(_user$project$Fps$Vertex, bur, col),
						_2: A2(_user$project$Fps$Vertex, blr, col)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple3',
							_0: A2(_user$project$Fps$Vertex, bul, col),
							_1: A2(_user$project$Fps$Vertex, blr, col),
							_2: A2(_user$project$Fps$Vertex, bll, col)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple3',
								_0: A2(_user$project$Fps$Vertex, bul, col),
								_1: A2(_user$project$Fps$Vertex, ful, col),
								_2: A2(_user$project$Fps$Vertex, fll, col)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple3',
									_0: A2(_user$project$Fps$Vertex, bul, col),
									_1: A2(_user$project$Fps$Vertex, fll, col),
									_2: A2(_user$project$Fps$Vertex, bll, col)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple3',
										_0: A2(_user$project$Fps$Vertex, bur, col),
										_1: A2(_user$project$Fps$Vertex, fur, col),
										_2: A2(_user$project$Fps$Vertex, flr, col)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple3',
											_0: A2(_user$project$Fps$Vertex, bur, col),
											_1: A2(_user$project$Fps$Vertex, flr, col),
											_2: A2(_user$project$Fps$Vertex, blr, col)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple3',
												_0: A2(_user$project$Fps$Vertex, bul, col),
												_1: A2(_user$project$Fps$Vertex, bur, col),
												_2: A2(_user$project$Fps$Vertex, fur, col)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple3',
													_0: A2(_user$project$Fps$Vertex, bul, col),
													_1: A2(_user$project$Fps$Vertex, fur, col),
													_2: A2(_user$project$Fps$Vertex, ful, col)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple3',
														_0: A2(_user$project$Fps$Vertex, bll, col),
														_1: A2(_user$project$Fps$Vertex, blr, col),
														_2: A2(_user$project$Fps$Vertex, flr, col)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple3',
															_0: A2(_user$project$Fps$Vertex, bll, col),
															_1: A2(_user$project$Fps$Vertex, flr, col),
															_2: A2(_user$project$Fps$Vertex, fll, col)
														},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};
	});
var _user$project$Fps$map = A2(
	_elm_lang$core$List$concatMap,
	function (e) {
		return A3(
			_user$project$Fps$ptToCube,
			e,
			1.5,
			A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0.2, 0.5, 0.5));
	},
	A2(
		_elm_lang$core$List$map,
		_elm_community$linear_algebra$Math_Vector3$scale(4),
		_user$project$Fps$dotMap));
var _user$project$Fps$view = function (_p4) {
	var _p5 = _p4;
	var _p6 = _p5.size;
	return A2(
		_elm_community$webgl$WebGL$toHtml,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$width(_p6.width),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$height(_p6.height),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A5(
				_elm_community$webgl$WebGL$entityWith,
				{
					ctor: '::',
					_0: A2(_elm_community$webgl$WebGL_Settings_Blend$add, _elm_community$webgl$WebGL_Settings_Blend$srcAlpha, _elm_community$webgl$WebGL_Settings_Blend$oneMinusSrcAlpha),
					_1: {
						ctor: '::',
						_0: _elm_community$webgl$WebGL_Settings_DepthTest$always(
							{write: true, near: 0, far: 1}),
						_1: {ctor: '[]'}
					}
				},
				_user$project$Fps$vertexShader,
				_user$project$Fps$fragmentShader,
				_elm_community$webgl$WebGL$triangles(_user$project$Fps$map),
				A4(_user$project$Fps$uniforms, _p6, _elm_lang$core$Basics$pi / 2, _p5.position, _p5.direction)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Fps$Uniform = F3(
	function (a, b, c) {
		return {rotation: a, perspective: b, camera: c};
	});
var _user$project$Fps$Varying = function (a) {
	return {vcolor: a};
};
var _user$project$Fps$MouseMove = function (a) {
	return {ctor: 'MouseMove', _0: a};
};
var _user$project$Fps$Click = function (a) {
	return {ctor: 'Click', _0: a};
};
var _user$project$Fps$KeyboardMsg = function (a) {
	return {ctor: 'KeyboardMsg', _0: a};
};
var _user$project$Fps$Animate = function (a) {
	return {ctor: 'Animate', _0: a};
};
var _user$project$Fps$subscriptions = function (_p7) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$animation_frame$AnimationFrame$diffs(_user$project$Fps$Animate),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Sub$map, _user$project$Fps$KeyboardMsg, _ohanhi$keyboard_extra$Keyboard_Extra$subscriptions),
				_1: {
					ctor: '::',
					_0: _elm_lang$mouse$Mouse$clicks(_user$project$Fps$Click),
					_1: {
						ctor: '::',
						_0: _user$project$Fps$mouseMove(_user$project$Fps$MouseMove),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Fps$Resize = function (a) {
	return {ctor: 'Resize', _0: a};
};
var _user$project$Fps$init = {
	ctor: '_Tuple2',
	_0: {
		size: A2(_elm_lang$window$Window$Size, 0, 0),
		angle: 0,
		position: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 0.3, 0),
		direction: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 0, -1),
		pressedKeys: {ctor: '[]'}
	},
	_1: A2(_elm_lang$core$Task$perform, _user$project$Fps$Resize, _elm_lang$window$Window$size)
};
var _user$project$Fps$main = _elm_lang$html$Html$program(
	{init: _user$project$Fps$init, subscriptions: _user$project$Fps$subscriptions, update: _user$project$Fps$update, view: _user$project$Fps$view})();
