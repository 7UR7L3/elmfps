var _user$project$Fps$getPlayers = function (p) {
	var _p0 = p;
	if (_p0.ctor === '[]') {
		return {
			ctor: '::',
			_0: '',
			_1: {ctor: '[]'}
		};
	} else {
		if (_p0._1.ctor === '[]') {
			var _p1 = _p0._0;
			return {
				ctor: '::',
				_0: A2(_elm_lang$core$String$append, _p1.name, ': '),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$String$append,
						'Position: ',
						_elm_lang$core$Basics$toString(_p1.position)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$String$append,
							'Health: ',
							_elm_lang$core$Basics$toString(_p1.health)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$String$append,
								'Score: ',
								_elm_lang$core$Basics$toString(_p1.score)),
							_1: {ctor: '[]'}
						}
					}
				}
			};
		} else {
			var _p2 = _p0._0;
			return A2(
				_elm_lang$core$List$append,
				{
					ctor: '::',
					_0: A2(_elm_lang$core$String$append, _p2.name, ': '),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$String$append,
							'Position: ',
							_elm_lang$core$Basics$toString(_p2.position)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$String$append,
								'Health: ',
								_elm_lang$core$Basics$toString(_p2.health)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$core$String$append,
									'Score: ',
									_elm_lang$core$Basics$toString(_p2.score)),
								_1: {
									ctor: '::',
									_0: ' ',
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				_user$project$Fps$getPlayers(_p0._1));
		}
	}
};
var _user$project$Fps$getMessage = function (m) {
	var _p3 = m;
	return A2(
		_elm_lang$core$List$append,
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$String$append,
				'Player ',
				_elm_lang$core$Basics$toString(_p3.which)),
			_1: {
				ctor: '::',
				_0: ' ',
				_1: {ctor: '[]'}
			}
		},
		_user$project$Fps$getPlayers(_p3.players));
};
var _user$project$Fps$base = F2(
	function (n, m) {
		return A2(
			_elm_lang$core$List$concatMap,
			function (em) {
				return A2(
					_elm_lang$core$List$map,
					function (en) {
						return A3(
							_elm_community$linear_algebra$Math_Vector3$vec3,
							_elm_lang$core$Basics$toFloat(en),
							_elm_lang$core$Basics$toFloat(em),
							-1);
					},
					A2(_elm_lang$core$List$range, 1, n));
			},
			A2(_elm_lang$core$List$range, 1, m));
	});
var _user$project$Fps$dotMap = A2(
	_elm_lang$core$Basics_ops['++'],
	{
		ctor: '::',
		_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 1, 1, 0),
		_1: {
			ctor: '::',
			_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 7, 1, 0),
			_1: {
				ctor: '::',
				_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 1, 23, 0),
				_1: {
					ctor: '::',
					_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 7, 23, 0),
					_1: {
						ctor: '::',
						_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 4, 12, 0),
						_1: {
							ctor: '::',
							_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 3, 12, 0),
							_1: {
								ctor: '::',
								_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 5, 12, 0),
								_1: {
									ctor: '::',
									_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 4, 13, 0),
									_1: {
										ctor: '::',
										_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 4, 11, 0),
										_1: {
											ctor: '::',
											_0: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 4, 12, 1),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	A2(_user$project$Fps$base, 7, 23));
var _user$project$Fps$directionToAngle = function (direction) {
	var _p4 = direction;
	switch (_p4.ctor) {
		case 'North':
			return 0;
		case 'NorthEast':
			return _elm_lang$core$Basics$pi * 0.25;
		case 'East':
			return _elm_lang$core$Basics$pi * 0.5;
		case 'SouthEast':
			return _elm_lang$core$Basics$pi * 0.75;
		case 'South':
			return _elm_lang$core$Basics$pi * 1;
		case 'SouthWest':
			return _elm_lang$core$Basics$pi * 1.25;
		case 'West':
			return _elm_lang$core$Basics$pi * 1.5;
		case 'NorthWest':
			return _elm_lang$core$Basics$pi * 1.75;
		default:
			return 0;
	}
};
var _user$project$Fps$fragmentShader = {'src': '\n  precision mediump float;\n  varying vec3 vcolor;\n  void main () {\n      gl_FragColor = vec4(vcolor, 0.2);\n  }\n'};
var _user$project$Fps$vertexShader = {'src': '\n  attribute vec3 position;\n  attribute vec3 color;\n  uniform mat4 perspective;\n  uniform mat4 camera;\n  uniform mat4 rotation;\n  varying vec3 vcolor;\n  void main () {\n      gl_Position = perspective * camera * rotation * vec4((0.05 * position) , 1.0);\n      vcolor = color;\n  }\n'};
var _user$project$Fps$uniforms = F4(
	function (_p5, angle, position, direction) {
		var _p6 = _p5;
		return {
			rotation: A2(
				_elm_community$linear_algebra$Math_Matrix4$makeRotate,
				angle,
				A3(_elm_community$linear_algebra$Math_Vector3$vec3, -1, 0, 0)),
			perspective: A4(
				_elm_community$linear_algebra$Math_Matrix4$makePerspective,
				45,
				_elm_lang$core$Basics$toFloat(_p6.width) / _elm_lang$core$Basics$toFloat(_p6.height),
				1.0e-2,
				100),
			camera: A3(
				_elm_community$linear_algebra$Math_Matrix4$makeLookAt,
				position,
				A2(_elm_community$linear_algebra$Math_Vector3$add, position, direction),
				A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 1, 0))
		};
	});
var _user$project$Fps$pToString = F2(
	function (p, i) {
		pToString:
		while (true) {
			var _p7 = p;
			if (_p7.ctor === '::') {
				if (_elm_lang$core$Native_Utils.eq(i, 0)) {
					var _p8 = _p7._0;
					return A2(
						_elm_lang$core$String$append,
						A2(
							_elm_lang$core$String$append,
							A2(
								_elm_lang$core$String$append,
								A2(
									_elm_lang$core$String$append,
									A2(
										_elm_lang$core$String$append,
										A2(
											_elm_lang$core$String$append,
											A2(
												_elm_lang$core$String$append,
												A2(
													_elm_lang$core$String$append,
													_elm_lang$core$Basics$toString(_p8.number),
													';'),
												_p8.name),
											';'),
										_elm_lang$core$Basics$toString(_p8.position)),
									';'),
								_elm_lang$core$Basics$toString(_p8.health)),
							';'),
						_elm_lang$core$Basics$toString(_p8.score));
				} else {
					var _v6 = _p7._1,
						_v7 = i - 1;
					p = _v6;
					i = _v7;
					continue pToString;
				}
			} else {
				return 'fail';
			}
		}
	});
var _user$project$Fps$psToString = function (p) {
	var _p9 = p;
	if (_p9.ctor === '[]') {
		return '';
	} else {
		return A2(
			_elm_lang$core$String$append,
			A2(
				_elm_lang$core$String$append,
				A2(_user$project$Fps$pToString, p, 0),
				'\n'),
			_user$project$Fps$psToString(_p9._1));
	}
};
var _user$project$Fps$requestPointerLock = _elm_lang$core$Native_Platform.outgoingPort(
	'requestPointerLock',
	function (v) {
		return null;
	});
var _user$project$Fps$mouseMove = _elm_lang$core$Native_Platform.incomingPort(
	'mouseMove',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (x0) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (x1) {
					return _elm_lang$core$Json_Decode$succeed(
						{ctor: '_Tuple2', _0: x0, _1: x1});
				},
				A2(_elm_lang$core$Json_Decode$index, 1, _elm_lang$core$Json_Decode$float));
		},
		A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$float)));
var _user$project$Fps$Player = F5(
	function (a, b, c, d, e) {
		return {number: a, name: b, position: c, health: d, score: e};
	});
var _user$project$Fps$updatePPos = F3(
	function (i, p, ps) {
		var _p10 = ps;
		if (_p10.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p15 = _p10._0.score;
			var _p14 = _p10._1;
			var _p13 = _p10._0.number;
			var _p12 = _p10._0.name;
			var _p11 = _p10._0.health;
			return _elm_lang$core$Native_Utils.eq(i, 0) ? {
				ctor: '::',
				_0: A5(
					_user$project$Fps$Player,
					_p13,
					_p12,
					{
						ctor: '::',
						_0: _elm_community$linear_algebra$Math_Vector3$getX(p),
						_1: {
							ctor: '::',
							_0: _elm_community$linear_algebra$Math_Vector3$getY(p),
							_1: {
								ctor: '::',
								_0: _elm_community$linear_algebra$Math_Vector3$getZ(p),
								_1: {ctor: '[]'}
							}
						}
					},
					_p11,
					_p15),
				_1: _p14
			} : {
				ctor: '::',
				_0: A5(_user$project$Fps$Player, _p13, _p12, _p10._0.position, _p11, _p15),
				_1: A3(_user$project$Fps$updatePPos, i - 1, p, _p14)
			};
		}
	});
var _user$project$Fps$updatePlayers = F2(
	function (p, s) {
		var _p16 = s;
		if (_p16.ctor === '::') {
			var l = A2(_elm_lang$core$String$split, ';', _p16._0);
			var _p17 = l;
			if ((((((_p17.ctor === '::') && (_p17._1.ctor === '::')) && (_p17._1._1.ctor === '::')) && (_p17._1._1._1.ctor === '::')) && (_p17._1._1._1._1.ctor === '::')) && (_p17._1._1._1._1._1.ctor === '[]')) {
				var _p19 = _p17._1._1._0;
				var throw2 = A2(
					_elm_lang$core$Debug$log,
					'correct',
					A2(
						_elm_lang$core$String$split,
						',',
						A3(
							_elm_lang$core$String$slice,
							1,
							_elm_lang$core$String$length(_p19) - 1,
							_p19)));
				return {
					ctor: '::',
					_0: A5(
						_user$project$Fps$Player,
						A2(
							_elm_lang$core$Result$withDefault,
							0,
							_elm_lang$core$String$toInt(_p17._0)),
						_p17._1._0,
						A2(
							_elm_lang$core$List$map,
							function (_p18) {
								return A2(
									_elm_lang$core$Result$withDefault,
									0,
									_elm_lang$core$String$toFloat(_p18));
							},
							A2(
								_elm_lang$core$String$split,
								',',
								A3(
									_elm_lang$core$String$slice,
									1,
									_elm_lang$core$String$length(_p19) - 1,
									_p19))),
						A2(
							_elm_lang$core$Result$withDefault,
							0,
							_elm_lang$core$String$toInt(_p17._1._1._1._0)),
						A2(
							_elm_lang$core$Result$withDefault,
							0,
							_elm_lang$core$String$toInt(_p17._1._1._1._1._0))),
					_1: A2(_user$project$Fps$updatePlayers, p, _p16._1)
				};
			} else {
				return {ctor: '[]'};
			}
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Fps$getMessageH = F2(
	function (p, s) {
		getMessageH:
		while (true) {
			var _p20 = {ctor: '_Tuple2', _0: p, _1: s};
			if (_p20._1.ctor === '[]') {
				return p;
			} else {
				if (_p20._0.ctor === '[]') {
					var _p25 = _p20._1._1;
					var _p24 = _p20._1._0;
					if (_elm_lang$core$Native_Utils.eq(_p24, '')) {
						var _v13 = {ctor: '[]'},
							_v14 = _p25;
						p = _v13;
						s = _v14;
						continue getMessageH;
					} else {
						if (_elm_lang$core$Native_Utils.eq(_p24, 'something')) {
							return p;
						} else {
							var l = A2(_elm_lang$core$String$split, ';', _p24);
							var _p21 = l;
							if ((((((_p21.ctor === '::') && (_p21._1.ctor === '::')) && (_p21._1._1.ctor === '::')) && (_p21._1._1._1.ctor === '::')) && (_p21._1._1._1._1.ctor === '::')) && (_p21._1._1._1._1._1.ctor === '[]')) {
								var _p23 = _p21._1._1._0;
								return {
									ctor: '::',
									_0: A5(
										_user$project$Fps$Player,
										A2(
											_elm_lang$core$Result$withDefault,
											0,
											_elm_lang$core$String$toInt(_p21._0)),
										_p21._1._0,
										A2(
											_elm_lang$core$List$map,
											function (_p22) {
												return A2(
													_elm_lang$core$Result$withDefault,
													0,
													_elm_lang$core$String$toFloat(_p22));
											},
											A2(
												_elm_lang$core$String$split,
												A3(
													_elm_lang$core$String$slice,
													1,
													_elm_lang$core$String$length(_p23),
													_p23),
												',')),
										A2(
											_elm_lang$core$Result$withDefault,
											0,
											_elm_lang$core$String$toInt(_p21._1._1._1._0)),
										A2(
											_elm_lang$core$Result$withDefault,
											0,
											_elm_lang$core$String$toInt(_p21._1._1._1._1._0))),
									_1: A2(
										_user$project$Fps$getMessageH,
										{ctor: '[]'},
										_p25)
								};
							} else {
								return {ctor: '[]'};
							}
						}
					}
				} else {
					if (_p20._1._0 === '') {
						return {
							ctor: '::',
							_0: _p20._0._0,
							_1: A2(_user$project$Fps$getMessageH, _p20._0._1, _p20._1._1)
						};
					} else {
						var _p29 = _p20._1._0;
						if (_elm_lang$core$Native_Utils.eq(_p29, 'something')) {
							return p;
						} else {
							var l = A2(_elm_lang$core$String$split, ';', _p29);
							var _p26 = l;
							if ((((((_p26.ctor === '::') && (_p26._1.ctor === '::')) && (_p26._1._1.ctor === '::')) && (_p26._1._1._1.ctor === '::')) && (_p26._1._1._1._1.ctor === '::')) && (_p26._1._1._1._1._1.ctor === '[]')) {
								var _p28 = _p26._1._1._0;
								return {
									ctor: '::',
									_0: A5(
										_user$project$Fps$Player,
										A2(
											_elm_lang$core$Result$withDefault,
											0,
											_elm_lang$core$String$toInt(_p26._0)),
										_p26._1._0,
										A2(
											_elm_lang$core$List$map,
											function (_p27) {
												return A2(
													_elm_lang$core$Result$withDefault,
													0,
													_elm_lang$core$String$toFloat(_p27));
											},
											A2(
												_elm_lang$core$String$split,
												',',
												A3(
													_elm_lang$core$String$slice,
													1,
													_elm_lang$core$String$length(_p28) - 1,
													_p28))),
										A2(
											_elm_lang$core$Result$withDefault,
											0,
											_elm_lang$core$String$toInt(_p26._1._1._1._0)),
										A2(
											_elm_lang$core$Result$withDefault,
											0,
											_elm_lang$core$String$toInt(_p26._1._1._1._1._0))),
									_1: A2(_user$project$Fps$getMessageH, _p20._0._1, _p20._1._1)
								};
							} else {
								return {ctor: '[]'};
							}
						}
					}
				}
			}
		}
	});
var _user$project$Fps$Model = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {which: a, players: b, message: c, size: d, angle: e, position: f, direction: g, pressedKeys: h, connected: i};
	});
var _user$project$Fps$getMessage2 = F2(
	function (m, s) {
		var _p30 = {ctor: '_Tuple2', _0: m, _1: s};
		if (_p30._1.ctor === '[]') {
			return _user$project$Fps$getMessage(m);
		} else {
			return _user$project$Fps$getMessage(
				A9(
					_user$project$Fps$Model,
					_p30._0.which,
					A2(_user$project$Fps$getMessageH, _p30._0.players, s),
					_p30._0.message,
					_p30._0.size,
					_p30._0.angle,
					_p30._0.position,
					_p30._0.direction,
					_p30._0.pressedKeys,
					_p30._0.connected));
		}
	});
var _user$project$Fps$update = F2(
	function (action, model) {
		var _p31 = action;
		_v18_6:
		do {
			switch (_p31.ctor) {
				case 'NewMessage':
					var _p42 = _p31._0;
					var _p32 = model;
					var _p41 = _p32.which;
					var _p40 = _p32.size;
					var _p39 = _p32.pressedKeys;
					var _p38 = _p32.position;
					var _p37 = _p32.players;
					var _p36 = _p32.direction;
					var _p35 = _p32.connected;
					var _p34 = _p32.angle;
					var $throw = A2(_elm_lang$core$Debug$log, 'message', _p42);
					var ap = A2(
						_user$project$Fps$updatePlayers,
						_p37,
						A2(_elm_lang$core$String$split, '?', _p42));
					var ps = _user$project$Fps$getPlayers(_p37);
					var plsprint = _elm_lang$core$String$concat(ps);
					var _p33 = _elm_lang$core$String$uncons(_p42);
					if ((_p33.ctor === 'Just') && (_p33._0.ctor === '_Tuple2')) {
						if (_elm_lang$core$Native_Utils.eq(
							_p33._0._0,
							_elm_lang$core$Native_Utils.chr('+'))) {
							var whichh = A2(
								_elm_lang$core$Result$withDefault,
								0,
								_elm_lang$core$String$toInt(_p33._0._1));
							var $throw = A2(
								_elm_lang$core$Debug$log,
								'Whichh',
								_user$project$Fps$psToString(ap));
							return {
								ctor: '_Tuple2',
								_0: A9(
									_user$project$Fps$Model,
									whichh,
									A2(
										_elm_lang$core$List$append,
										_p37,
										{
											ctor: '::',
											_0: A5(
												_user$project$Fps$Player,
												whichh,
												'Player 1',
												{
													ctor: '::',
													_0: 0,
													_1: {
														ctor: '::',
														_0: 0.15,
														_1: {
															ctor: '::',
															_0: 0,
															_1: {ctor: '[]'}
														}
													}
												},
												1000,
												0),
											_1: {ctor: '[]'}
										}),
									A2(
										_user$project$Fps$getMessage2,
										model,
										A2(_elm_lang$core$String$split, '?', _p42)),
									_p40,
									_p34,
									_p38,
									_p36,
									_p39,
									true),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							var $throw = A2(
								_elm_lang$core$Debug$log,
								'Before before',
								_user$project$Fps$psToString(ap));
							return {
								ctor: '_Tuple2',
								_0: A9(
									_user$project$Fps$Model,
									_p41,
									ap,
									A2(
										_user$project$Fps$getMessage2,
										model,
										A2(_elm_lang$core$String$split, '?', _p42)),
									_p40,
									_p34,
									_p38,
									_p36,
									_p39,
									_p35),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					} else {
						return {
							ctor: '_Tuple2',
							_0: A9(
								_user$project$Fps$Model,
								_p41,
								ap,
								A2(
									_user$project$Fps$getMessage2,
									model,
									A2(_elm_lang$core$String$split, '?', _p42)),
								_p40,
								_p34,
								_p38,
								_p36,
								_p39,
								_p35),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'Resize':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{size: _p31._0}),
						{ctor: '[]'});
				case 'Animate':
					if (model.connected) {
						var dir = _ohanhi$keyboard_extra$Keyboard_Extra$wasdDirection(model.pressedKeys);
						var a = (_user$project$Fps$directionToAngle(dir) - A2(
							_elm_lang$core$Basics$atan2,
							_elm_community$linear_algebra$Math_Vector3$getX(model.direction),
							_elm_community$linear_algebra$Math_Vector3$getZ(model.direction))) + _elm_lang$core$Basics$pi;
						var m = _elm_lang$core$Native_Utils.update(
							model,
							{
								angle: model.angle + (a / 50),
								position: function () {
									var movSpeed = A2(_elm_lang$core$List$member, _ohanhi$keyboard_extra$Keyboard_Extra$Shift, model.pressedKeys) ? 2 : 1;
									return _elm_lang$core$Native_Utils.eq(dir, _ohanhi$keyboard_extra$Keyboard_Extra$NoDirection) ? model.position : A3(
										_elm_community$linear_algebra$Math_Vector3$vec3,
										_elm_community$linear_algebra$Math_Vector3$getX(model.position) + ((_elm_lang$core$Basics$sin(a) * movSpeed) / 75),
										_elm_community$linear_algebra$Math_Vector3$getY(model.position),
										_elm_community$linear_algebra$Math_Vector3$getZ(model.position) - ((_elm_lang$core$Basics$cos(a) * movSpeed) / 75));
								}()
							});
						var plsprint2 = _user$project$Fps$psToString(model.players);
						var throw2 = A2(_elm_lang$core$Debug$log, 'before', plsprint2);
						var p = A3(_user$project$Fps$updatePPos, model.which, m.position, model.players);
						var plsprint = _user$project$Fps$psToString(p);
						var throw2 = A2(_elm_lang$core$Debug$log, 'after', plsprint);
						var tosend = A2(_user$project$Fps$pToString, p, m.which);
						var throw2 = A2(_elm_lang$core$Debug$log, 'tosend', tosend);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								m,
								{players: p}),
							_1: A2(_elm_lang$websocket$WebSocket$send, 'ws://localhost:3000', tosend)
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'KeyboardMsg':
					var keys = A2(_ohanhi$keyboard_extra$Keyboard_Extra$update, _p31._0, model.pressedKeys);
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{pressedKeys: keys}),
						{ctor: '[]'});
				case 'Click':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Fps$requestPointerLock(
							{ctor: '_Tuple0'})
					};
				case 'MouseMove':
					if (_p31._0.ctor === '_Tuple2') {
						var pitched = A2(
							_elm_community$linear_algebra$Math_Matrix4$transform,
							A2(
								_elm_community$linear_algebra$Math_Matrix4$makeRotate,
								(0 - _p31._0._0) / 1000,
								A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 1, 0)),
							model.direction);
						var acrossvec = A2(
							_elm_lang$core$Basics$atan2,
							_elm_community$linear_algebra$Math_Vector3$getX(model.direction),
							_elm_community$linear_algebra$Math_Vector3$getZ(model.direction)) - (_elm_lang$core$Basics$pi / 2);
						var yawed = A2(
							_elm_community$linear_algebra$Math_Matrix4$transform,
							A2(
								_elm_community$linear_algebra$Math_Matrix4$makeRotate,
								(0 - _p31._0._1) / 1000,
								A3(
									_elm_community$linear_algebra$Math_Vector3$vec3,
									_elm_lang$core$Basics$sin(acrossvec),
									0,
									_elm_lang$core$Basics$cos(acrossvec))),
							pitched);
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{direction: yawed}),
							{ctor: '[]'});
					} else {
						break _v18_6;
					}
				default:
					break _v18_6;
			}
		} while(false);
		return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$Fps$Vertex = F2(
	function (a, b) {
		return {position: a, color: b};
	});
var _user$project$Fps$ptToCube = F3(
	function (p, s, col) {
		var fll = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) - s);
		var flr = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) - s);
		var ful = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) - s);
		var fur = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) - s);
		var bll = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) + s);
		var blr = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) + s);
		var bul = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) - s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) + s);
		var bur = A3(
			_elm_community$linear_algebra$Math_Vector3$vec3,
			_elm_community$linear_algebra$Math_Vector3$getX(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getY(p) + s,
			_elm_community$linear_algebra$Math_Vector3$getZ(p) + s);
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: A2(_user$project$Fps$Vertex, ful, col),
				_1: A2(_user$project$Fps$Vertex, fur, col),
				_2: A2(_user$project$Fps$Vertex, flr, col)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple3',
					_0: A2(_user$project$Fps$Vertex, ful, col),
					_1: A2(_user$project$Fps$Vertex, flr, col),
					_2: A2(_user$project$Fps$Vertex, fll, col)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple3',
						_0: A2(_user$project$Fps$Vertex, bul, col),
						_1: A2(_user$project$Fps$Vertex, bur, col),
						_2: A2(_user$project$Fps$Vertex, blr, col)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple3',
							_0: A2(_user$project$Fps$Vertex, bul, col),
							_1: A2(_user$project$Fps$Vertex, blr, col),
							_2: A2(_user$project$Fps$Vertex, bll, col)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple3',
								_0: A2(_user$project$Fps$Vertex, bul, col),
								_1: A2(_user$project$Fps$Vertex, ful, col),
								_2: A2(_user$project$Fps$Vertex, fll, col)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple3',
									_0: A2(_user$project$Fps$Vertex, bul, col),
									_1: A2(_user$project$Fps$Vertex, fll, col),
									_2: A2(_user$project$Fps$Vertex, bll, col)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple3',
										_0: A2(_user$project$Fps$Vertex, bur, col),
										_1: A2(_user$project$Fps$Vertex, fur, col),
										_2: A2(_user$project$Fps$Vertex, flr, col)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple3',
											_0: A2(_user$project$Fps$Vertex, bur, col),
											_1: A2(_user$project$Fps$Vertex, flr, col),
											_2: A2(_user$project$Fps$Vertex, blr, col)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple3',
												_0: A2(_user$project$Fps$Vertex, bul, col),
												_1: A2(_user$project$Fps$Vertex, bur, col),
												_2: A2(_user$project$Fps$Vertex, fur, col)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple3',
													_0: A2(_user$project$Fps$Vertex, bul, col),
													_1: A2(_user$project$Fps$Vertex, fur, col),
													_2: A2(_user$project$Fps$Vertex, ful, col)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple3',
														_0: A2(_user$project$Fps$Vertex, bll, col),
														_1: A2(_user$project$Fps$Vertex, blr, col),
														_2: A2(_user$project$Fps$Vertex, flr, col)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple3',
															_0: A2(_user$project$Fps$Vertex, bll, col),
															_1: A2(_user$project$Fps$Vertex, flr, col),
															_2: A2(_user$project$Fps$Vertex, fll, col)
														},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};
	});
var _user$project$Fps$map = A2(
	_elm_lang$core$List$concatMap,
	function (e) {
		return A3(
			_user$project$Fps$ptToCube,
			e,
			2.5,
			A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0.2, 0.5, 0.5));
	},
	A2(
		_elm_lang$core$List$map,
		_elm_community$linear_algebra$Math_Vector3$scale(6),
		_user$project$Fps$dotMap));
var _user$project$Fps$view = function (_p43) {
	var _p44 = _p43;
	var _p48 = _p44.size;
	var _p47 = _p44.position;
	var _p46 = _p44.direction;
	return A2(
		_elm_community$webgl$WebGL$toHtml,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$width(_p48.width),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$height(_p48.height),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A5(
				_elm_community$webgl$WebGL$entityWith,
				{
					ctor: '::',
					_0: A2(_elm_community$webgl$WebGL_Settings_Blend$add, _elm_community$webgl$WebGL_Settings_Blend$srcAlpha, _elm_community$webgl$WebGL_Settings_Blend$oneMinusSrcAlpha),
					_1: {
						ctor: '::',
						_0: _elm_community$webgl$WebGL_Settings_DepthTest$always(
							{write: true, near: 0, far: 1}),
						_1: {ctor: '[]'}
					}
				},
				_user$project$Fps$vertexShader,
				_user$project$Fps$fragmentShader,
				_elm_community$webgl$WebGL$triangles(_user$project$Fps$map),
				A4(_user$project$Fps$uniforms, _p48, _elm_lang$core$Basics$pi / 2, _p47, _p46)),
			_1: A2(
				_elm_lang$core$List$map,
				function (p) {
					var pos = function () {
						var _p45 = p.position;
						if (((_p45.ctor === '::') && (_p45._1.ctor === '::')) && (_p45._1._1.ctor === '::')) {
							return A3(_elm_community$linear_algebra$Math_Vector3$vec3, _p45._0 * 10, -10 * _p45._1._1._0, _p45._1._0 * 10);
						} else {
							return A2(
								_elm_lang$core$Debug$log,
								'ohno',
								A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 0, 0));
						}
					}();
					return A5(
						_elm_community$webgl$WebGL$entityWith,
						{
							ctor: '::',
							_0: A2(_elm_community$webgl$WebGL_Settings_Blend$add, _elm_community$webgl$WebGL_Settings_Blend$srcAlpha, _elm_community$webgl$WebGL_Settings_Blend$oneMinusSrcAlpha),
							_1: {
								ctor: '::',
								_0: _elm_community$webgl$WebGL_Settings_DepthTest$always(
									{write: true, near: 0, far: 1}),
								_1: {ctor: '[]'}
							}
						},
						_user$project$Fps$vertexShader,
						_user$project$Fps$fragmentShader,
						_elm_community$webgl$WebGL$triangles(
							A3(
								_user$project$Fps$ptToCube,
								pos,
								2.5,
								A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0.5, 0.5, 0.5))),
						A4(_user$project$Fps$uniforms, _p48, _elm_lang$core$Basics$pi / 2, _p47, _p46));
				},
				_p44.players)
		});
};
var _user$project$Fps$Uniform = F3(
	function (a, b, c) {
		return {rotation: a, perspective: b, camera: c};
	});
var _user$project$Fps$Varying = function (a) {
	return {vcolor: a};
};
var _user$project$Fps$NewMessage = function (a) {
	return {ctor: 'NewMessage', _0: a};
};
var _user$project$Fps$Send = function (a) {
	return {ctor: 'Send', _0: a};
};
var _user$project$Fps$MouseMove = function (a) {
	return {ctor: 'MouseMove', _0: a};
};
var _user$project$Fps$Click = function (a) {
	return {ctor: 'Click', _0: a};
};
var _user$project$Fps$KeyboardMsg = function (a) {
	return {ctor: 'KeyboardMsg', _0: a};
};
var _user$project$Fps$Animate = function (a) {
	return {ctor: 'Animate', _0: a};
};
var _user$project$Fps$subscriptions = function (_p49) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$animation_frame$AnimationFrame$diffs(_user$project$Fps$Animate),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Sub$map, _user$project$Fps$KeyboardMsg, _ohanhi$keyboard_extra$Keyboard_Extra$subscriptions),
				_1: {
					ctor: '::',
					_0: _elm_lang$mouse$Mouse$clicks(_user$project$Fps$Click),
					_1: {
						ctor: '::',
						_0: _user$project$Fps$mouseMove(_user$project$Fps$MouseMove),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$websocket$WebSocket$listen, 'ws://localhost:3000', _user$project$Fps$NewMessage),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Fps$Send),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$Fps$Resize = function (a) {
	return {ctor: 'Resize', _0: a};
};
var _user$project$Fps$init = {
	ctor: '_Tuple2',
	_0: {
		which: 0,
		players: {
			ctor: '::',
			_0: A5(
				_user$project$Fps$Player,
				0,
				'Player 1',
				{
					ctor: '::',
					_0: 0,
					_1: {
						ctor: '::',
						_0: 0.15,
						_1: {
							ctor: '::',
							_0: 0,
							_1: {ctor: '[]'}
						}
					}
				},
				1000,
				0),
			_1: {ctor: '[]'}
		},
		message: {
			ctor: '::',
			_0: 'Start!',
			_1: {ctor: '[]'}
		},
		size: A2(_elm_lang$window$Window$Size, 0, 0),
		angle: 0,
		position: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 0.15, 0),
		direction: A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 0, -1),
		pressedKeys: {ctor: '[]'},
		connected: false
	},
	_1: A2(_elm_lang$core$Task$perform, _user$project$Fps$Resize, _elm_lang$window$Window$size)
};
var _user$project$Fps$main = _elm_lang$html$Html$program(
	{init: _user$project$Fps$init, subscriptions: _user$project$Fps$subscriptions, update: _user$project$Fps$update, view: _user$project$Fps$view})();
